class Client is subclass of User
/*
    A client is a user that requests rides.
*/
types
    public Status = <Ready> | <Waiting> ;
    
instance variables
    -- a client has a rating, a status, a current location and a set of trip reports.
    public rating: rat := 5;
    public status: Status := <Ready>;
    public location: UberUtils`Location;
    public reports: set of Uber`Report := {};

operations
  -- Client Constructor
    public Client : String * nat * nat ==> Client
        Client(nm, lat, lon) == (
            name := nm;
            location := mk_UberUtils`Location(lat, lon, "Portugal");
            return self
        );
		
		/*GET METHODS*/
		-- gets Status
		pure public getStatus: () ==> Status
		getStatus() == return status;
		
		--gets Location
		pure public getLocation: () ==> UberUtils`Location
		getLocation() == return location;
		
		-- gets Reports
		pure public getReports: () ==> set of Uber`Report
		getReports() == return reports;
		
    -- Operations that change the Client's state
    public setReady: () ==> ()
        setReady() ==
        status := <Ready>
        pre status = <Waiting>;
        
    public setWaiting: () ==> ()
        setWaiting() ==
            status := <Waiting>
            pre status = <Ready>;
    
    
    -- adds a report to their report set
    public endTrip: Uber`Report ==> ()
        endTrip(rep) == (
            reports := reports union {rep};
            location := rep.locationEnd;
            status := <Ready>;
        )    
        pre (rep not in set reports)
        post (rep in set reports);
            
end Client