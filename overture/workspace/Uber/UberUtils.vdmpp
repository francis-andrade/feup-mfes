class UberUtils
/*
	This class contains functions and types useful for abstraction and computation of operations.
*/
types
	public Timestamp ::	hour: nat1
											minute: nat1
											second: nat1;
	
	public Location :: latitude: nat
										 longitude: nat
										 country: seq1 of char;

functions
	public timeBetween : Timestamp * Timestamp -> nat
		timeBetween(timeS, timeE) == 
			(timeE.hour *1440 + timeE.minute * 60 + timeE.second) 
					- (timeS.hour *1440 + timeS.minute * 60 + timeS.second)
		pre timeE.hour > timeS.hour or (timeE.hour = timeS.hour and 
					(timeE.minute > timeS.minute or (timeE.minute = timeS.minute 
					and timeE.second > timeS.second)));
	
	public calculateCost: rat * nat -> rat
		calculateCost(distance, time) == 
			2.5 + distance * 0.30 + 0.10 * (time/60);
	
	public calculateDistance: Location * Location -> rat	
		calculateDistance(localS, localD) ==
			((localS.latitude - localD.latitude) ** 2 + (localS.longitude - localD.longitude) ** 2) ** 0.5;
			
	public calculateEndTime: Timestamp * nat -> nat
		calculateEndTime(timeS, elapsed) == 
			timeS.hour * 1440 + timeS.minute * 60 + timeS.second + elapsed;
		
	public calculateTravelTime :nat1 *  real -> nat
		calculateTravelTime(speed, dist) == 
			floor(dist/speed) + 1;
				
	public calculateTimestamp: nat -> Timestamp
		calculateTimestamp(seconds) == 
			mk_Timestamp(seconds/3600, (seconds/60) rem 60, seconds rem 60);
		
end UberUtils